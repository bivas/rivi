// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package thriftlion

import (
	"bytes"
	"database/sql/driver"
	"errors"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type Level int64
const (
  Level_DEBUG Level = 0
  Level_INFO Level = 1
  Level_WARN Level = 2
  Level_ERROR Level = 3
  Level_FATAL Level = 4
  Level_PANIC Level = 5
  Level_NONE Level = 6
)

func (p Level) String() string {
  switch p {
  case Level_DEBUG: return "DEBUG"
  case Level_INFO: return "INFO"
  case Level_WARN: return "WARN"
  case Level_ERROR: return "ERROR"
  case Level_FATAL: return "FATAL"
  case Level_PANIC: return "PANIC"
  case Level_NONE: return "NONE"
  }
  return "<UNSET>"
}

func LevelFromString(s string) (Level, error) {
  switch s {
  case "DEBUG": return Level_DEBUG, nil 
  case "INFO": return Level_INFO, nil 
  case "WARN": return Level_WARN, nil 
  case "ERROR": return Level_ERROR, nil 
  case "FATAL": return Level_FATAL, nil 
  case "PANIC": return Level_PANIC, nil 
  case "NONE": return Level_NONE, nil 
  }
  return Level(0), fmt.Errorf("not a valid Level string")
}


func LevelPtr(v Level) *Level { return &v }

func (p Level) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *Level) UnmarshalText(text []byte) error {
q, err := LevelFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *Level) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = Level(v)
return nil
}

func (p * Level) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - Encoding
//  - Name
//  - Value
type EntryMessage struct {
  Encoding *string `thrift:"encoding,1" db:"encoding" json:"encoding,omitempty"`
  Name *string `thrift:"name,2" db:"name" json:"name,omitempty"`
  Value []byte `thrift:"value,3" db:"value" json:"value,omitempty"`
}

func NewEntryMessage() *EntryMessage {
  return &EntryMessage{}
}

var EntryMessage_Encoding_DEFAULT string
func (p *EntryMessage) GetEncoding() string {
  if !p.IsSetEncoding() {
    return EntryMessage_Encoding_DEFAULT
  }
return *p.Encoding
}
var EntryMessage_Name_DEFAULT string
func (p *EntryMessage) GetName() string {
  if !p.IsSetName() {
    return EntryMessage_Name_DEFAULT
  }
return *p.Name
}
var EntryMessage_Value_DEFAULT []byte

func (p *EntryMessage) GetValue() []byte {
  return p.Value
}
func (p *EntryMessage) IsSetEncoding() bool {
  return p.Encoding != nil
}

func (p *EntryMessage) IsSetName() bool {
  return p.Name != nil
}

func (p *EntryMessage) IsSetValue() bool {
  return p.Value != nil
}

func (p *EntryMessage) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EntryMessage)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Encoding = &v
}
  return nil
}

func (p *EntryMessage)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = &v
}
  return nil
}

func (p *EntryMessage)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *EntryMessage) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("EntryMessage"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EntryMessage) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEncoding() {
    if err := oprot.WriteFieldBegin("encoding", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:encoding: ", p), err) }
    if err := oprot.WriteString(string(*p.Encoding)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.encoding (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:encoding: ", p), err) }
  }
  return err
}

func (p *EntryMessage) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetName() {
    if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
    if err := oprot.WriteString(string(*p.Name)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  }
  return err
}

func (p *EntryMessage) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetValue() {
    if err := oprot.WriteFieldBegin("value", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:value: ", p), err) }
    if err := oprot.WriteBinary(p.Value); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.value (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:value: ", p), err) }
  }
  return err
}

func (p *EntryMessage) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EntryMessage(%+v)", *p)
}

// Attributes:
//  - ID
//  - Level
//  - TimeUnixNanos
//  - Context
//  - Fields
//  - Event
//  - Message
//  - WriterOutput
type Entry struct {
  ID *string `thrift:"id,1" db:"id" json:"id,omitempty"`
  Level *Level `thrift:"level,2" db:"level" json:"level,omitempty"`
  TimeUnixNanos *int64 `thrift:"time_unix_nanos,3" db:"time_unix_nanos" json:"time_unix_nanos,omitempty"`
  Context []*EntryMessage `thrift:"context,4" db:"context" json:"context,omitempty"`
  Fields map[string]string `thrift:"fields,5" db:"fields" json:"fields,omitempty"`
  Event *EntryMessage `thrift:"event,6" db:"event" json:"event,omitempty"`
  Message *string `thrift:"message,7" db:"message" json:"message,omitempty"`
  WriterOutput []byte `thrift:"writer_output,8" db:"writer_output" json:"writer_output,omitempty"`
}

func NewEntry() *Entry {
  return &Entry{}
}

var Entry_ID_DEFAULT string
func (p *Entry) GetID() string {
  if !p.IsSetID() {
    return Entry_ID_DEFAULT
  }
return *p.ID
}
var Entry_Level_DEFAULT Level
func (p *Entry) GetLevel() Level {
  if !p.IsSetLevel() {
    return Entry_Level_DEFAULT
  }
return *p.Level
}
var Entry_TimeUnixNanos_DEFAULT int64
func (p *Entry) GetTimeUnixNanos() int64 {
  if !p.IsSetTimeUnixNanos() {
    return Entry_TimeUnixNanos_DEFAULT
  }
return *p.TimeUnixNanos
}
var Entry_Context_DEFAULT []*EntryMessage

func (p *Entry) GetContext() []*EntryMessage {
  return p.Context
}
var Entry_Fields_DEFAULT map[string]string

func (p *Entry) GetFields() map[string]string {
  return p.Fields
}
var Entry_Event_DEFAULT *EntryMessage
func (p *Entry) GetEvent() *EntryMessage {
  if !p.IsSetEvent() {
    return Entry_Event_DEFAULT
  }
return p.Event
}
var Entry_Message_DEFAULT string
func (p *Entry) GetMessage() string {
  if !p.IsSetMessage() {
    return Entry_Message_DEFAULT
  }
return *p.Message
}
var Entry_WriterOutput_DEFAULT []byte

func (p *Entry) GetWriterOutput() []byte {
  return p.WriterOutput
}
func (p *Entry) IsSetID() bool {
  return p.ID != nil
}

func (p *Entry) IsSetLevel() bool {
  return p.Level != nil
}

func (p *Entry) IsSetTimeUnixNanos() bool {
  return p.TimeUnixNanos != nil
}

func (p *Entry) IsSetContext() bool {
  return p.Context != nil
}

func (p *Entry) IsSetFields() bool {
  return p.Fields != nil
}

func (p *Entry) IsSetEvent() bool {
  return p.Event != nil
}

func (p *Entry) IsSetMessage() bool {
  return p.Message != nil
}

func (p *Entry) IsSetWriterOutput() bool {
  return p.WriterOutput != nil
}

func (p *Entry) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Entry)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = &v
}
  return nil
}

func (p *Entry)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Level(v)
  p.Level = &temp
}
  return nil
}

func (p *Entry)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TimeUnixNanos = &v
}
  return nil
}

func (p *Entry)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*EntryMessage, 0, size)
  p.Context =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &EntryMessage{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.Context = append(p.Context, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Entry)  ReadField5(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Fields =  tMap
  for i := 0; i < size; i ++ {
var _key1 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key1 = v
}
var _val2 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val2 = v
}
    p.Fields[_key1] = _val2
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Entry)  ReadField6(iprot thrift.TProtocol) error {
  p.Event = &EntryMessage{}
  if err := p.Event.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Event), err)
  }
  return nil
}

func (p *Entry)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Message = &v
}
  return nil
}

func (p *Entry)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.WriterOutput = v
}
  return nil
}

func (p *Entry) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Entry"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Entry) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetID() {
    if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
    if err := oprot.WriteString(string(*p.ID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  }
  return err
}

func (p *Entry) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetLevel() {
    if err := oprot.WriteFieldBegin("level", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:level: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Level)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.level (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:level: ", p), err) }
  }
  return err
}

func (p *Entry) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetTimeUnixNanos() {
    if err := oprot.WriteFieldBegin("time_unix_nanos", thrift.I64, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:time_unix_nanos: ", p), err) }
    if err := oprot.WriteI64(int64(*p.TimeUnixNanos)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.time_unix_nanos (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:time_unix_nanos: ", p), err) }
  }
  return err
}

func (p *Entry) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetContext() {
    if err := oprot.WriteFieldBegin("context", thrift.LIST, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:context: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Context)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Context {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:context: ", p), err) }
  }
  return err
}

func (p *Entry) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetFields() {
    if err := oprot.WriteFieldBegin("fields", thrift.MAP, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:fields: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Fields)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Fields {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:fields: ", p), err) }
  }
  return err
}

func (p *Entry) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetEvent() {
    if err := oprot.WriteFieldBegin("event", thrift.STRUCT, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:event: ", p), err) }
    if err := p.Event.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Event), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:event: ", p), err) }
  }
  return err
}

func (p *Entry) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetMessage() {
    if err := oprot.WriteFieldBegin("message", thrift.STRING, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:message: ", p), err) }
    if err := oprot.WriteString(string(*p.Message)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.message (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:message: ", p), err) }
  }
  return err
}

func (p *Entry) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetWriterOutput() {
    if err := oprot.WriteFieldBegin("writer_output", thrift.STRING, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:writer_output: ", p), err) }
    if err := oprot.WriteBinary(p.WriterOutput); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.writer_output (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:writer_output: ", p), err) }
  }
  return err
}

func (p *Entry) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Entry(%+v)", *p)
}

